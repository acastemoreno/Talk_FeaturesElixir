* Slide Options                           :noexport:
# ======= Appear in cover-slide ====================
#+TITLE: Elixir for Ruby Developers
#+SUBTITLE: Introduction to Language
#+COMPANY: For Ruby Peru
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com

# ======= Appear in thank-you-slide ================
#+GITHUB: http://github.com/acastemoreno

# ======= Appear under each slide ==================
#+FAVICON: images/elixir.png
#+ICON: images/elixir.png
#+HASHTAG: #RubyPeru #MyElixirStatus

# ======= Google Analytics =========================
#+ANALYTICS: ----

# ======= Org settings =========================
#+EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil num:nil ^:nil
#+LANGUAGE: es
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="theme/css/custom.css" />

* Me
- Alumno de Codeable (2do cohort)
- Aprendi a usar Elixir antes que Ruby.
  - Side-Projects y trabajos freelancer.
- Entusiasta sobre Elixir.

* Objetivo de la charla
- Revisar los principales features de Elixir Lang.
- No se consideran features de programacion concurrente y distribuida.
- Orientado a desarrolladores que empiezan con el lenguaje y que no tienen un background de programacion funcional.

* Ruby (one hard problem)
#+BEGIN_CENTER
#+ATTR_HTML: :height 350px
[[file:images/ruby.png]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/frustation.gif
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Aprovechar arquitectura multinucleo
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/cpu0.jpg]]
#+END_CENTER

* Concurrencia y paralelismo en Ruby
#+BEGIN_CENTER
#+ATTR_HTML: :height 370px
[[file:images/ruby_process.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:1]
solo para nota[fn:2]
#+END_QUOTE

* genial, vayamos por jruby (pero existe un problema)
#+BEGIN_CENTER
#+ATTR_HTML: :height 340px
[[file:images/threads-memory.png]]
#+END_CENTER

* Ejemplo
#+BEGIN_CENTER
#+ATTR_HTML: :height 440px
[[file:images/codigo.png]]
#+END_CENTER

* Unexpected results
#+BEGIN_CENTER
#+ATTR_HTML: :height 440px
[[file:images/ruby_results.png]]
#+END_CENTER

* Pequeño adelanto (use case)
Procesar 2.7 millones de imagenes (downdload from aws, resize and upload)
- Ruby v2: 
  - *31.25* dias.
- Jruby:
  - *18 dias*
  - Hard time en desarrollo
- Elixir: 
  - *4 dias* 
  - 12 dias para figurar como trabajar con Elixir xD
  - *WORTH IT!*

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Hasta que un joven programador aparecio.
#+END_QUOTE

* Jose Valim (parte de la core team de Ruby on Rails)
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/jose_valim.jpg]]
#+END_CENTER

* se encontro con un libro
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/seven_language.jpg]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:3]
#+END_QUOTE

* 
  :PROPERTIES:
  :FILL:     images/telefonista.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* [[https://www.youtube.com/watch?v=xrIjfIjssLE&feature=youtu.be][Erlang The Movie - 1986]]
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/erlang_the_movie.jpg]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/Erlang_logo.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Una red telefonica siempre debera operar independientemente del numero simultaneo de llamadas, bugs inesperados, o llevandose actualizaciones de hardware y software.

– Saša Jurić, Elixir in Action
#+END_QUOTE

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Cualidades necesarias en sistemas modernos.
#+END_QUOTE

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
La idea original de Jose era llevar los conceptos de Erlang a Ruby.
#+END_QUOTE

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Pero simplemente no podia llevar 40 años de desarrollo a Ruby.

Termino creando un nuevo lenguaje
#+END_QUOTE

* Proceso de creación (2011)
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/pineapple_pen.gif]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/logos.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Ruby -> Elixir (Developer Joy)
#+BEGIN_CENTER
#+ATTR_HTML: :height 400px
[[file:images/BOB-ROSS.jpg]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:4]
#+END_QUOTE

* Erlang -> Elixir (40 years of Development)
#+BEGIN_CENTER
#+ATTR_HTML: :height 380px
[[file:images/erlang_elixir.png]]
#+END_CENTER

* Clojure -> Elixir (Metaprogramación)
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/metaprogramming.jpg]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:5]
#+END_QUOTE

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
Elixir is what would happen if Erlang, Clojure, and Ruby somehow had a baby and it wasn’t an accident.

–Devin Torres
#+END_QUOTE

* Some Concepts
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pattern Matching
#+BEGIN_CENTER
#+ATTR_HTML: :width 300px
[[file:images/babe_pattern.gif]]
#+END_CENTER
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:17]
Nota[fn:18]
#+END_QUOTE

** Pattern Matching ===
#+BEGIN_SRC elixir
iex> {nombre, apodo} = {"Albert", "Amiguito"}
iex> nombre
"Albert"
iex> apodo
"Amiguito"
iex> {:ok, mensaje} = {:ok, "Holi Woli"}
{:ok, "Holi Woli"}
iex> mensaje
"Holi Woli"
iex> [a,_,_,_, %{value: a}] = [1, 2, 3, 4, %{value: 1}]
#+END_SRC

** Funciones
#+BEGIN_SRC elixir
iex> double = fn (n) -> n*2 end
iex> double.(2)
4
#+END_SRC
#+BEGIN_SRC elixir
defmodule MyMath do
  def factorial(0), do: 1
  def factorial(n), when is_integer(n) and  n >=0 do: n * factorial(n - 1)
  def factorial(_), do: "qué paso amiguito?"
end

iex> MyMath.factorial(5)
120
#+END_SRC

** Inmutabilidad en Elixir
- Ninguna funcion es capaz de modificar sus parametros de entrada.
#+BEGIN_SRC elixir
iex> person = %{nombre: "Albert", favorite_word: "Amiguito"}
iex> change = fn map -> map |> Map.put(:favorite_word, "Holi Woli") end
iex> change.(person)
%{<b>favorite_word: "Holi Woli"</b>, nombre: "Albert"}
iex> person
%{<b>favorite_word: "Amiguito"</b>, nombre: "Albert"}
#+END_SRC

** Pipe Operator =|>=
#+BEGIN_CENTER
#+ATTR_HTML: :width 500px
[[file:images/production_line.png]]
#+END_CENTER
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:19]
Nota[fn:20]
#+END_QUOTE

** Pipe Operator =|>=
Diseñado inicialmente para resolver este problema (basado en pipeline de unix):
#+BEGIN_SRC elixir
lista = 1..500000
temp = Enum.map(lista, &(&1*2-20))
respuesta = Enum.filter(temp, &(rem(&1, 3) == 0 || rem(&1, 5) == 0))
respuesta = Enum.take(temp, 5)

Enum.take(Enum.filter(Enum.map(1..500000, &(&1*2-20)),
&(rem(&1, 3) == 0 || rem(&1, 5) == 0)), 5)
#+END_SRC

** Pipe Operator =|>=
Podemos usar algo más elegante y eficiente
#+BEGIN_SRC elixir
1..500000
  |> Enum.map(&(&1*2-20))
  |> Enum.filter(&(rem(&1, 3) == 0 || rem(&1, 5) == 0))
  |> Enum.take(5)
#+END_SRC

** Pipe Operator =|>=
#+BEGIN_CENTER
#+ATTR_HTML: :width 295px
[[file:images/chain_function.png]]
#+END_CENTER

** Macros (Metaprogramación)
- Demo Time
#+BEGIN_SRC elixir
iex> require MyMacro
iex> MyMacro.say(3+4)
iex> MyMacro.say(3*4)
#+END_SRC

** With (Special Form)
- Demo Time
#+BEGIN_SRC elixir
iex> SpecialForm.with("holi")
iex> SpecialForm.with(%{width: 100})
iex> SpecialForm.with(%{width: 100, height: 200})
#+END_SRC

* BEAM (Virtual Machine)
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Sistema Operativo
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/OS.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:16]
#+END_QUOTE

* Application
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/application.png]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/Night_Of_The_Living_Dead.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/erlang_vm.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
BEAM (Erlang VM) no es un sistema operativo de proposito general.
#+END_QUOTE

* Segue (Hide Title)
  :PROPERTIES:
  :TITLE: hide
  :SLIDE: segue dark quote
  :ASIDE: right bottom
  :ARTICLE: flexbox vleft auto-fadein line-through
  :END:
#+BEGIN_QUOTE
El proposito general de BEAM es ser un lugar solido donde ejecutar codigo.
#+END_QUOTE

* Actors (Procesos BEAM)
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/props_process.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Scheduler(Ejecutar procesos en los CPU Core)
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/schedule_reductions.png]]
#+END_CENTER

* Scheduler(Procesos esperando mensaje, proceso fuera de la cola de ejecucion)
#+BEGIN_CENTER
#+ATTR_HTML: :height 380px
[[file:images/schedule_mailbox.png]]
#+END_CENTER

* Arbol de supervision
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/supervision_tree.png]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/let_it_crash.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Por qué aprender Elixir?
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Performance y Projects
- [[https://phoenixframework.org/blog/the-road-to-2-million-websocket-connections][2 Millones de WebSocket Conections (2015)]]

- [[https://twitter.com/robmadole/status/1278055974519988224][Font Awesome - 100 and 250 microseconds]]

- Telemetry (DEMO)

- Livew View

* Comunidad
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/liked.png]]
#+END_CENTER

* 
  :PROPERTIES:
  :FILL:     images/elixir_with_love.png
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/elixir-girls.jpg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* 
  :PROPERTIES:
  :FILL:     images/elixir_child.jpeg
  :TITLE:    white
  :SLIDE:    white contain-image
  :END:

* Some Companies using Elixir
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* 
  :PROPERTIES:
  :FILL:     images/companies/discord-elixir-banner.png
  :TITLE:    white
  :SLIDE:    white cover-image white_footer
  :END:
#+ATTR_HTML: :class note
#+BEGIN_QUOTE
solo para nota[fn:6]
solo para nota[fn:7]
solo para nota[fn:8]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/companies/toyota_connected_conf.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota9[fn:9]
Nota10[fn:10]
Nota11[fn:11]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 320px
[[file:images/companies/pinterest.jpeg]]
#+END_CENTER

- 200 servidores python a solo 4 con Elixir.
- 30 instancias c32.xl con Java a solo 15 con Elixir[fn:12].

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota13[fn:13]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/companies/apc-schneider.jpg]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota14[fn:14]
#+END_QUOTE

* 
#+BEGIN_CENTER
#+ATTR_HTML: :height 420px
[[file:images/companies/square_enix.png]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota15[fn:15]
#+END_QUOTE

* Thank You ʕ•ᴥ•ʔ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[http://nathanmlong.com/2017/06/concurrency-vs-paralellism/][Recomendado: Concurrency vs Paralellism - Burrito shop context]]
[fn:2] [[https://www.youtube.com/watch?v=xoNRtWl4fZU&feature=youtu.be&t=4m44s][ElixirDaze 2016 - Processing 2.7 million images with Elixir (vs Ruby) by David Padilla]]
[fn:3] [[https://pragprog.com/book/btlang/seven-languages-in-seven-weeks][Seven languages in seven weeks]]
[fn:4] Bob Ross, pintor de "árboles felices" y del "placer de pintar"
[fn:5] [[https://pragprog.com/book/cmelixir/metaprogramming-elixir][Metaprogramming Elixir]]
[fn:6] [[https://content.nanobox.io/discord-elixir-concurrency-template-high-performance/][Discord's Use of Elixir to Handle Concurrency: A Template for Achieving High Performance]]
[fn:7] [[https://blog.discordapp.com/tagged/elixir][Discord Blog - Tag Elixir]]
[fn:8] [[https://www.youtube.com/watch?v=P89N1YJBjpA][ZenMonitor: Scaling Distributed Monitoring at Discord | Code BEAM SF 19]]
[fn:9] [[https://www.youtube.com/watch?v=37V6L1EA4ac][ElixirConf 2017 - Elixir The Toyota Way - Powell Kinney]]
[fn:10] [[https://codesync.global/media/elixir-powers-first-car-share-service-from-toyota/][Elixir powers first Car Share Service from Toyota]]
[fn:11] [[https://www.drivehui.com/][Hui - Proyecto de Toyota Connected que usa Elixir]]
[fn:12] [[https://pragprog.com/book/tvmelixir/adopting-elixir][Adopting Elixir]] - Pagina 13
[fn:13] [[https://medium.com/@Pinterest_Engineering/introducing-new-open-source-tools-for-the-elixir-community-2f7bb0bb7d8c][Introducing new open-source tools for the Elixir community]]
[fn:14] [[https://github.com/se-apc][APC Github]]
[fn:15] [[https://apply.workable.com/square-enix/j/DE5E1A81A1/][Job to apply - Back End Developer - Ruby / Elixir]]
[fn:16] [[https://en.wikipedia.org/wiki/Operating_system][https://en.wikipedia.org/wiki/Operating_system]]
[fn:17] [[https://www.poetic oding.com/the-beauty-of-pattern-matching-in-elixir/][The beauty of Pattern Matching in elixir]]
[fn:18] [[https://blog.carbonfive.com/2017/10/19/pattern-matching-in-elixir-five-things-to-remember/][Pattern Matching in Elixir: Five Things To Remember]]
[fn:19] [[https://elixircasts.io/pipe-operator][Pipe Operator - ElixirCasts]]
[fn:20] [[https://medium.com/@kkomaz/baby-steps-to-elixir-pipe-operator-a82257bdc28d][Baby Steps to Elixir: Pipe Operator |>]]