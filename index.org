* Slide Options                           :noexport:
# ======= Appear in cover-slide ====================
#+TITLE: Introducción a principales features Elixir
#+SUBTITLE: sin considerar programación concurrente y distribuida
#+COMPANY: For Elixir Developers Mexico
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com

# ======= Appear in thank-you-slide ================
#+GITHUB: http://github.com/acastemoreno

# ======= Appear under each slide ==================
#+FAVICON: images/elixir.png
#+ICON: images/elixir.png
#+HASHTAG: #ElixirLang #ElixirMX #ElixirWithLove

# ======= Google Analytics =========================
#+ANALYTICS: ----

# ======= Org settings =========================
#+EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil num:nil ^:nil
#+LANGUAGE: es
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="theme/css/custom.css" />

* Me
- Alumno de Codeable. 
  - Bootcamp intensivo de 6 meses para aprender Ruby y JavaScript.
- 5 años de experiencia con Elixir
  - Side-Projects y trabajos freelancer.
- Entusiasta sobre Elixir.

* Objetivo de la charla
- Revisar los principales features de Elixir Lang.
- No se consideran features de programacion concurrente y distribuida.
- Orientado a desarrolladores que empiezan con el lenguaje y que no tienen un background de programacion funcional.

* Contenido
- Pattern Matching
- Anonymous and Named Funtion (Inmutabilidad, Multiple bodys and guard clauses)
- Pipe Operator
- Special Forms
  - case
  - for
  - with
- Polymorphic Funcions (Protocols)
- Type Specification

* Pattern Matching
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pattern Matching
#+BEGIN_CENTER
#+ATTR_HTML: :width 300px
[[file:images/babe_pattern.gif]]
#+END_CENTER

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Nota[fn:1]
Nota[fn:2]
#+END_QUOTE

* patron = data
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pattern Matching
2 partes:
- *Data*: Expresion evaluada contra la cual se hara una comparación.
- *Patron*: Forma de data.
  -Contiene variables.

** Pattern Matching
Elixir *tratará* de asignar valores a las variables para que la comparación sea verdadera.

- La *asignación de variables* es una *posible consecuencia* de pattern matching. 

** Ejemplos
#+BEGIN_SRC elixir
#Asignación?
iex> nombre = "Albert"

#Destructuring?
iex> {nombre, <b>_apellido</b>} = {"Albert", "Castellano"}
iex> {<b>value</b>, <b>value</b>} = {28, 27}
iex> {<b>^nombre</b>, apellido} = {"Jose", "Valim"}

#Pattern Matching!
iex> [<b>a</b>,_,_,_, %{value: <b>a</b>}] = [<b>1</b>, 2, 3, 4, %{value: <b>1</b>}]
iex> [<b>a</b>,_,_,_, %{value: <b>a</b>}] = [<b>1</b>, 2, 3, 4, %{value: <b>2</b>}]
#+END_SRC

* Funciones
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Funciones
#+BEGIN_CENTER
#+ATTR_HTML: :height 300px
[[file:images/funciones.png]]
#+END_CENTER
Divididas en dos tipos.

* Funciones anonimas
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Funciones anonimas
#+BEGIN_SRC elixir
#<b>fn</b>(<parametro1>, <parametro2>, ....) <b>-></b> <ejecucion y retorno> <b>end</b>

iex> <b>velocidad = fn</b> (altura) <b>-></b> :math.sqrt(2 * 9.81 * altura) <b>end</b>
#Function<6.52032458/1 in :erl_eval.expr/5>
iex> velocidad<b>.</b>(3)
7.672027111526653

iex> <b>sum = fn</b> (a, b) <b>-></b> a + b <b>end</b>
#Function<12.17052888 in :erl_eval.expr/5>
iex> sum<b>.</b>(1, 2)
3
#+END_SRC

* Funciones anonimas y pattern matching
#+BEGIN_SRC elixir
iex> velocidad = <b>fn</b>
...> <b>(altura) when is_number(altura)</b> -> :math.sqrt(2 * 9.81 * altura)
...> <b>(_)</b> -> "Qué paso amiguito?"
...> <b>end</b>
#Function<6.52032458/1 in :erl_eval.expr/5>

iex> velocidad(3)
7.672027111526653

iex> velocidad.("Holi")
"Qué paso amiguito?"
#+END_SRC

* Shortcut &
#+BEGIN_SRC elixir
iex> cociente_residuo = &{ div(&1,&2), rem(&1,&2) }
iex> cociente_residuo.(13, 5)
{2, 3}
iex> lista = &[&1, &1 * 2, &1 * 3]
iex> lista.(5)
[5, 10, 15]
#+END_SRC

* Funciones con nombre
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:


** Funciones con nombre
#+BEGIN_SRC elixir
#file: caida.exs
<b>defmodule Caida</b> do
  def <b>velocidad</b>(altura) <b>do</b>
    :math.sqrt(2 * 9.81 * altura)
  <b>end</b>
end
#+END_SRC

** Funciones con nombre y pattern matching
#+BEGIN_SRC elixir
#file: factorial.exs
defmodule Factorial do
  def de(<b>0</b>)<b>, do:</b> 1
  def de(<b>n</b>) when <b>is_number(n), do:</b> n * de(n-1)
  def de(<b>_), do:</b> "Que paso amiguito?"
end
#+END_SRC

* Thank You ʕ•ᴥ•ʔ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://www.poetic oding.com/the-beauty-of-pattern-matching-in-elixir/][The beauty of Pattern Matching in elixir]]
[fn:2] [[https://blog.carbonfive.com/2017/10/19/pattern-matching-in-elixir-five-things-to-remember/][Pattern Matching in Elixir: Five Things To Remember]]